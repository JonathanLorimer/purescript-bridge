-- File auto generated by purescript-bridge! --
module Types where

import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (defaultOptions, genericDecode, genericEncode)
import Prim (Int, String)

import Prelude

newtype Foo =
    Foo {
      _fooMessage :: String
    , _fooNumber :: Int
    }

instance encodeFoo :: Encode Foo where
  encode = genericEncode $ defaultOptions { unwrapSingleConstructors = false }
instance decodeFoo :: Decode Foo where
  decode = genericDecode $ defaultOptions { unwrapSingleConstructors = false }
derive instance genericFoo :: Generic Foo _
derive instance newtypeFoo :: Newtype Foo _

--------------------------------------------------------------------------------
_Foo :: Iso' Foo { _fooMessage :: String, _fooNumber :: Int}
_Foo = _Newtype

fooMessage :: Lens' Foo String
fooMessage = _Newtype <<< prop (SProxy :: SProxy "_fooMessage")

fooNumber :: Lens' Foo Int
fooNumber = _Newtype <<< prop (SProxy :: SProxy "_fooNumber")

--------------------------------------------------------------------------------
